#!/usr/bin/env python3
"""
Script to dynamically generate the README.

```
python3 generate_readme.py
```
"""
import itertools
import ast
import glob
import os


def get_docstring(filename):
    module = ast.parse(open(filename).read())
    docstring = ast.get_docstring(module)
    return docstring.strip().split('\n')[0] if docstring else docstring


def get_template():
    """
    Retrieve the template from which contains the README is generated.
    """
    tmpl = """\
{WATERMARK}
# `two1`: buy/sell anything on the internet with Bitcoin.

`two1` is a command line tool and library that allows users to receive
bitcoin, use it to buy and sell API calls, set up world-readable
machine-payable endpoints, and publish them to the Many Machine Market
from any Unix command line.

# Developer Installation

Here's how to install the command line app for development purposes:

```bash
# Install homebrew and Python3
$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
$ brew install python3

# Download repo, set up virtualenv,  install requirements
$ git clone git@github.com:21dotco/two1.git
$ cd two1
$ pyvenv venv
$ source venv/bin/activate
$ pip3 install --upgrade pip
$ pip3 install -r requirements.txt

# By using the --editable flag, pip symbolically links an egg file
# You can then edit locally and rerun ``two1`` to see changes.
# http://click.pocoo.org/4/setuptools/#setuptools-integration
# pip.pypa.io/en/latest/reference/pip_install.html#editable-installs
$ pip3 install --editable .

# Start the walletd daemon
$ walletd

# Verify installation and create wallet
$ two1 --help
$ two1 status
```

If you follow these steps, you will have the ``two1`` command line app in your
path, and will also be able to edit the files in the ``two1`` directory and see
those changes reflected in the command line app in realtime.

# Running Tests

Unit tests can be run with `pytest <http://pytest.org/latest/>`_:

```bash
$ py.test
```

{CODEBASE}
"""
    return tmpl


def generate_watermark():
    """
    An HTML comment.
    """
    return (
        '<!--- Do not edit this file directly!\n'
        'This file was dynamically generated from `generate_readme.py`.\n'
        'Edit that and then run `python3 generate_readme.py` -->\n'
    )


def generate_codebase():
    """
    Generate the "The Codebase" main section of the README.
    """
    yield('# The Codebase')
    filenames = filter(
        get_docstring, itertools.chain(
            glob.iglob('two1/**/*.py', recursive=True),
            glob.iglob('tests/**/*.py', recursive=True),
        ))
    for directory, filenames in itertools.groupby(filenames, os.path.dirname):
        yield('## The `%s` directory' % directory)
        for filename in filenames:
            yield(' - [%s](%s): %s' % (
                os.path.basename(filename).replace('_', '\_'), filename, get_docstring(filename)))
        yield('')

if __name__ == '__main__':
    template = get_template()
    with open('README.md', 'w') as f:
        f.write(
            # Poor man's templating rendering engine
            template
            .replace('{WATERMARK}', generate_watermark())
            .replace('{CODEBASE}', '\n'.join(generate_codebase()))
        )
