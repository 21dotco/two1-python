// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: ulas@google.com (Ulas Kirazci)

package protobuf_unittest;

option java_package = "com.google.protobuf.nano";
option java_outer_classname = "NanoHasOuterClass";

message TestAllTypesNanoHas {

  message NestedMessage {
    optional int32 bb = 1;
  }

  enum NestedEnum {
    FOO = 1;
    BAR = 2;
    BAZ = 3;
  }

  // Singular
  optional int32  optional_int32    =  1;
  optional float  optional_float    = 11;
  optional double optional_double   = 12;
  optional string optional_string   = 14;
  optional bytes  optional_bytes    = 15;

  optional NestedMessage optional_nested_message = 18;

  optional NestedEnum optional_nested_enum = 21;

  // Repeated
  repeated int32  repeated_int32    = 31;
  repeated string repeated_string   = 44;
  repeated bytes  repeated_bytes    = 45;

  repeated NestedMessage repeated_nested_message  = 48;

  repeated NestedEnum repeated_nested_enum  = 51;

  // Singular with defaults
  optional int32  default_int32    = 61 [default =  41    ];
  optional string default_string   = 74 [default = "hello"];
  optional bytes  default_bytes    = 75 [default = "world"];

  optional float default_float_nan = 99  [default =  nan];

  optional NestedEnum default_nested_enum = 81 [default = BAR];

  required int32 id = 86;
  required NestedEnum required_enum = 87;

}
